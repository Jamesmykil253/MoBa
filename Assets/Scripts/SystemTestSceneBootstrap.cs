using System;
using UnityEngine;
using UnityEngine.EventSystems;
using MOBA.Debugging;

namespace MOBA
{
    /// <summary>
    /// Runtime scene scaffolding used by autogenerated system test scenes.
    /// The intent follows the tooling recommendations in Clean Code and Game Programming Patterns:
    /// spin up minimal isolated environments with predictable setup.
    /// </summary>
    public sealed class SystemTestSceneBootstrap : MonoBehaviour
    {
        [Serializable]
        public struct SpawnInstruction
        {
            public string name;
            public GameObject prefab;
            public Vector3 position;
            public Vector3 eulerAngles;
            public Vector3 scale;
        }

        [Header("Scaffold")]
        [SerializeField] private bool createCamera = true;
        [SerializeField] private Vector3 cameraPosition = new Vector3(0f, 6f, -10f);
        [SerializeField] private Vector3 cameraLookAt = Vector3.zero;
        [SerializeField] private bool attachPerformanceOverlay = true;

        [SerializeField] private bool createDirectionalLight = true;
        [SerializeField] private Vector3 lightEulerAngles = new Vector3(50f, -30f, 0f);

        [SerializeField] private bool createEventSystem = true;
        [SerializeField] private bool createErrorHandler = false;

        [Header("Prefabs")]
        [SerializeField] private SpawnInstruction[] spawnInstructions = Array.Empty<SpawnInstruction>();

        private void Start()
        {
            if (createCamera)
            {
                CreateCamera();
            }

            if (createDirectionalLight)
            {
                CreateDirectionalLight();
            }

            if (createEventSystem)
            {
                CreateEventSystem();
            }

            if (createErrorHandler)
            {
                CreateErrorHandler();
            }

            SpawnPrefabs();
        }

        private void CreateCamera()
        {
            var cameraGO = new GameObject("Test Camera");
            var camera = cameraGO.AddComponent<Camera>();
            camera.tag = "MainCamera";
            cameraGO.AddComponent<AudioListener>();

            cameraGO.transform.position = cameraPosition;
            cameraGO.transform.LookAt(cameraLookAt);

            if (attachPerformanceOverlay)
            {
                if (cameraGO.GetComponent<PerformanceOverlay>() == null)
                {
                    cameraGO.AddComponent<PerformanceOverlay>();
                }
            }
        }

        private void CreateDirectionalLight()
        {
            var lightGO = new GameObject("Test Directional Light");
            var light = lightGO.AddComponent<Light>();
            light.type = LightType.Directional;
            light.intensity = 1.1f;
            light.shadows = LightShadows.Soft;
            lightGO.transform.rotation = Quaternion.Euler(lightEulerAngles);
        }

        private void CreateEventSystem()
        {
            if (UnityEngine.Object.FindFirstObjectByType<EventSystem>() != null)
            {
                return;
            }

            var eventSystemGO = new GameObject("EventSystem");
            eventSystemGO.AddComponent<EventSystem>();
            eventSystemGO.AddComponent<StandaloneInputModule>();
        }

        private void CreateErrorHandler()
        {
            if (UnityEngine.Object.FindFirstObjectByType<ErrorHandling.ErrorHandlerMonoBehaviour>() != null)
            {
                return;
            }

            var handlerGO = new GameObject("ErrorHandler");
            handlerGO.AddComponent<ErrorHandling.ErrorHandlerMonoBehaviour>();
        }

        private void SpawnPrefabs()
        {
            if (spawnInstructions == null)
            {
                return;
            }

            foreach (var instruction in spawnInstructions)
            {
                if (instruction.prefab == null)
                {
                    continue;
                }

                var instance = Instantiate(instruction.prefab);
                instance.name = string.IsNullOrEmpty(instruction.name) ? instruction.prefab.name : instruction.name;
                instance.transform.position = instruction.position;
                instance.transform.rotation = Quaternion.Euler(instruction.eulerAngles);
                if (instruction.scale != Vector3.zero)
                {
                    instance.transform.localScale = instruction.scale;
                }
            }
        }
    }
}
